<script>

  var scrum2b = angular.module('scrum2b', ['xeditable', 'issueService', 'issue', 'comment_issue', 'file_issue']);
  scrum2b.directive('sortable', function($http) {
    return {
      restrict: 'A',
      link: function(scope, elm, attrs) {
        var jqueryElm = $(elm[0]);
        $(jqueryElm).sortable({
          connectWith: ".connectedSortable"
        }).disableSelection()

        $(jqueryElm).on( "sortout", function( event, ui ) { 
          $('.content').find('.hide_backlog').find('.content_issue').show();
        });

        $(jqueryElm).on( "sortover", function( event, ui ) {
          $(this).addClass('background_sortover');
          $('.ui-sortable-helper').addClass('move_issue');
          $('.ui-sortable-helper').addClass('div_ui');
          a = $(this).attr('class');
          if ($('.location_start_issue').length == 0 ) {
            $("<div class='location_start_issue'></div>").insertAfter(".move_issue");
          };
          check_height_max_angular();
        });

        $(jqueryElm).on( "sortout", function( event, ui ) {
          $(this).removeClass("background_sortover");
        });

        $(jqueryElm).on( "sortstart", function( event, ui ) {
          $('.setting').hide();
        });

        $(jqueryElm).on( "sortstop", function( event, ui ) {
           $( ".location_start_issue" ).remove();
          check_height_max_angular();
        });
      
        $(jqueryElm).on( "sortbeforestop", function( event, ui ) {
          var div_start = $(this).attr('id');
          var div_end = $('.move_issue').parent().attr('id');
          var issueID = $('.move_issue').attr('issue-id');
          var statusID = $('.move_issue').parent().attr('status-id');
          var versionID = $('.move_issue').parent().attr('version-id');
          $('.move_issue').removeClass('move_issue');

          if(statusID){
            updateStatus(issueID,statusID,versionID);
            scope.sortStop(issueID,statusID,versionID);
          }
          if( div_start == "sortable_backlog" || div_end == "sortable_backlog"){
            scope.getNumberIssuesAfter(versionID);
          }
        });

        function updateStatus(id, status_id, version_id){
          var request = $http({
            method: "post",
            url: "update_status",
            params: {
              action: "get"
            },
            data: {
              id: id,
              status_id : status_id,
              fixed_version_id : version_id,
              project_id: "<%= @project.id %>"
            },
          });

          function  handleSuccess( response ){
            return ( response.data );
          }
        }
        
        function check_height_max_angular(){
          $(".sprint-active .check_height").css("height","auto");
          var height1 = $(".active #sortable1").height();
          var height2 = $(".active #sortable2").height();
          var height3 = $(".active #sortable3").height();
          var height4 = $(".active #sortable4").height();
          var array_height = [height1, height2, height3, height4];
          var max_height = Math.max.apply(Math, array_height);
          $(".sprint-active .check_height").css("height",max_height);
        }
      }
    };
  })

  scrum2b.directive('datepicker', function () {
    return {
      restrict: 'A',
      require: 'ngModel',
      link: function (scope, element, attrs, ngModelCtrl) {
        element.datepicker({
          dateFormat: 'yy-mm-dd',
          onSelect: function (date) {
            scope.date = date;
            scope.$apply();
          }
        });
      }
    };
  });
</script>